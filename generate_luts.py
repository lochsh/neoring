from __future__ import print_function, division
import numpy as np
import colorsys

decl_colour = "const uint8_t lut_colour[32][32][3] PROGMEM"
decl_dsp_input = "const int8_t lut_dsp_input[256] PROGMEM"

with open("luts.h", "w") as f:
    f.write("/* Lookup Tables\n")
    f.write(" * Generated by generate_luts.py\n")
    f.write(" */")
    f.write("\n")
    f.write("#ifndef LUTS_H\n#define LUTS_H\n")
    f.write("extern " + decl_colour + ";\n")
    f.write("extern " + decl_dsp_input + ";\n")
    f.write("#endif")

f = open("luts.c", "w")

f.write("#include <stdint.h>\n")
f.write("#include <avr/pgmspace.h>\n")
f.write("\n")

f.write("/* Colour lookup table\n")
f.write(" * 32 hues by 32 values by 3 channels (RGB)\n")
f.write(" * Values in power scale to map human intensity perception.\n")
f.write(" */\n")
f.write(decl_colour + " = {\n")
f.write("    {\n        ")
for h, hue in enumerate(np.linspace(0.0, 1.0, 32, endpoint=False)):
    for v, val in enumerate(np.linspace(0.05, 1.0, 32)):
        val = val**2
        r, g, b = colorsys.hsv_to_rgb(hue, 1.0, val)
        r = int(r*255)
        g = int(g*255)
        b = int(b*255)
        f.write(" {{{: >3d}, {: >3d}, {: >3d}}},".format(r, g, b))
        if v % 4 == 3 and v != 31:
            f.write("\n        ")
    if h != 31:
        f.write("\n    }, {\n        ")
f.write("\n    }\n};\n")

f.write("\n\n")

f.write("/* DSP input transformation table\n")
f.write(" * Transforms a 0-255 uint8_t input biased around 127 to extract a\n")
f.write(" * useful representation of the 'power', approximating squaring\n")
f.write(" * but with a linear transform around small zeros and a dead zone.\n")
f.write(" */\n")
f.write(decl_dsp_input + " = {\n")
deadband = 4
output = []
for x in range(-128, 128):
    if abs(x) <= deadband:
        y = 0
    elif abs(x) < 50:
        y = abs(x) - deadband
    else:
        y = (2.5 * x**2) / 128
    y = min(127, int(y))
    output.append("{: >3d}".format(y))
for i in range(256//12 + 1):
    f.write("    "+", ".join(output[i*12:(i+1)*12]) + ",\n")
f.write("};\n")

f.close()
